import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.jgrapht.*;
import org.jgrapht.alg.cycle.JohnsonSimpleCycles;
import org.jgrapht.graph.*;
import org.json.JSONArray;
import org.json.JSONObject;

import com.fasterxml.jackson.databind.ObjectMapper;


public class JGraph {
	
	// define constant
	
	
    private JGraph()
    {
    } // ensure non-instantiability.

    public static void main(String[] args)
    {
    	String dirName = "EZ-data-warehouse-output";
    	File dir = new File(dirName);
    	File[] files = dir.listFiles();
    	for(int i = 0; i < files.length; i++){
    		if(files[i].isFile()){
    			String filePath = ".\\" + dirName + "\\" + files[i].getName();
    	    	// note undirected edges are printed as: {<v1>,<v2>}
    	        // note directed edges are printed as: (<v1>,<v2>)
    	        DirectedGraph<String, DefaultEdge> directedGraph = createStringGraph(filePath, 90); // <-------------90?
    	        System.out.println(directedGraph.toString());
    	        // create a graph based on URL objects
    	        // DirectedGraph<URL, DefaultEdge> hrefGraph = createHrefGraph();
    	        // System.out.println(hrefGraph.toString());
    	        JohnsonSimpleCycles<String, DefaultEdge> cyclesFinder = new JohnsonSimpleCycles<String, DefaultEdge>(directedGraph) ;
    	        List<List<String>> cycles = cyclesFinder.findSimpleCycles();
    	        UpdateJSONFiles(cycles, filePath);
    	        System.out.println("=====" + Integer.toString(i) + "====================");
    		}
    	}
    	
    }
    
    /**
     * Creates a toy directed graph based on URL objects that represents link structure.
     *
     * @return a graph based on URL objects.
     */
    private static DirectedGraph<URL, DefaultEdge> createHrefGraph()
    {
        DirectedGraph<URL, DefaultEdge> g = new DefaultDirectedGraph<URL, DefaultEdge>(DefaultEdge.class);

        try {
            URL amazon = new URL("http://www.amazon.com");
            URL yahoo = new URL("http://www.yahoo.com");
            URL ebay = new URL("http://www.ebay.com");

            // add the vertices
            g.addVertex(amazon);
            g.addVertex(yahoo);
            g.addVertex(ebay);

            // add edges to create linking structure
            g.addEdge(yahoo, amazon);
            g.addEdge(yahoo, ebay);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }

        return g;
    }

    /**
     * Create a toy graph based on String objects.
     * There are 3 cycles in this graph: v1 (to it self), v1-v2, v1-v2-v3-v4 
     *
     * @return a graph based on String objects.
     */
    private static DirectedGraph<String, DefaultEdge> createStringGraph()
    {
        DirectedGraph<String, DefaultEdge> g = new DefaultDirectedGraph<String, DefaultEdge>(DefaultEdge.class);
        
        String v1 = "v1";
        String v2 = "v2";
        String v3 = "v3";
        String v4 = "v4";

        // add the vertices
        g.addVertex(v1);
        g.addVertex(v2);
        g.addVertex(v3);
        g.addVertex(v4);

        // add edges to create a circuit
        g.addEdge(v1, v2);
        g.addEdge(v2, v3);
        g.addEdge(v3, v4);
        g.addEdge(v4, v1);
        g.addEdge(v1, v1); //a cycle from a vertex back to it self
        g.addEdge(v2, v1); //a cycle of two vertices
        return g;
    }

    /**
     * @param file paths of json files generated by https://github.com/peerlogic/Data-Warehouse-Object-Relational-Mapping
     * @param the score threshold to decide the line (edge) color in d3 visualization. 
     * If the score is bigger than or equal to the threshold, the corresponding line (edge) will be green
     * and it will be consider during collusion detection. 
     * Otherwisem the line (edge) color will be red, and will be excluded during collusion detection.
     *
     * @return a graph based on String objects.
     */
    private static DirectedGraph<String, DefaultEdge> createStringGraph(String filePath, int scoreThreshold)
    {

    	DirectedGraph<String, DefaultEdge> g = new DefaultDirectedGraph<String, DefaultEdge>(DefaultEdge.class);
        
        try {
			File file = new File(filePath);
			FileInputStream fis = new FileInputStream(file);
			// read the file as a byte array
			byte[] data = new byte[(int) file.length()];
			fis.read(data);
			fis.close();
			// convert the byte array into a string
			String str = new String(data, "UTF-8");
			JSONObject obj = new JSONObject(str);
			// get the critiques as an Array
			JSONArray critiques = obj.getJSONArray("critiques");
			for (int i = 0; i < critiques.length(); i++)
			{
			    String reviewerActorId = critiques.getJSONObject(i).getString("reviewer_actor_id");
			    String revieweeActorId = critiques.getJSONObject(i).getString("reviewee_actor_id");
			    // Add vertex
			    if(!g.containsVertex(reviewerActorId)) g.addVertex(reviewerActorId);
			    if(!g.containsVertex(revieweeActorId)) g.addVertex(revieweeActorId);
			    double score = critiques.getJSONObject(i).getDouble("score");
			    if(score > 80.0 && reviewerActorId.compareTo(revieweeActorId) != 0 )
			    {
			    	g.addEdge(reviewerActorId, revieweeActorId);
			    }
			}
	        return g;
		} catch (UnsupportedEncodingException e) {
			System.out.println( "UnsupportedEncodingException!");
			return null;
		} catch (FileNotFoundException e) {
			System.out.println( "FileNotFoundException!");
			return null;
		} catch (IOException e) {
			System.out.println( "FileNotFoundException!");
			return null;
		}
    }
    
    /**
     * reference: http://crunchify.com/how-to-write-json-object-to-file-in-java/
     * @param cycles
     * @param filePath
     */
    private static void UpdateJSONFiles(List<List<String>> cycles, String filePath){
    	// generate collude_cycles info
    	Map<String, String> colluderMap = new HashMap<String, String>();
    	JSONArray colluders = new JSONArray();
    	Map<String, JSONArray> colluderCycleMap = new HashMap<String, JSONArray>();
    	JSONArray colluderCycles = new JSONArray();
    	
    	for (int i = 0; i < cycles.size(); i++){
    		//colluderCycles = new JSONArray();
        	List<String> currentCycle = cycles.get(i);
        	if (currentCycle.size() > 4) continue; // <------------------- 4??
        	colluders = new JSONArray();
        	for (int j = 0; j < currentCycle.size(); j++){
        		System.out.print(currentCycle.get(j) + " ");
        		colluderMap.put("id", currentCycle.get(j));
        		colluders.put(j, colluderMap);
        	}
        	System.out.println();
        	if(colluders.length() > 0) {
        		colluderCycleMap.put("colluders", colluders);
        		colluderCycles.put(colluderCycleMap);
        	}
        }

    	// read file and append collude_cycles info
    	JSONObject obj;
    	try {
			File file = new File(filePath);
			FileInputStream fis = new FileInputStream(file);
			// read the file as a byte array
			byte[] data = new byte[(int) file.length()];
			fis.read(data);
			fis.close();
			// convert the byte array into a string
			String str = new String(data, "UTF-8");
			obj = new JSONObject(str);
			// get the critiques as an Array
			obj.put("colluder_cycles", colluderCycles);
		} catch (UnsupportedEncodingException e) {
			System.out.println( "UnsupportedEncodingException!");
			return;
		} catch (FileNotFoundException e) {
			System.out.println( "FileNotFoundException!");
			return;
		} catch (IOException e) {
			System.out.println( "FileNotFoundException!");
			return;
		}
    	// write to json file
    	try (FileWriter file = new FileWriter(filePath)) {
    		// beautify json
    		ObjectMapper mapper = new ObjectMapper();
    		Object json = mapper.readValue(obj.toString(), Object.class);
			file.write(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(json));
			System.out.println("Successfully Copied JSON Object to File...");
    	} catch (UnsupportedEncodingException e) {
			System.out.println( "UnsupportedEncodingException!");
			return;
		} catch (FileNotFoundException e) {
			System.out.println( "FileNotFoundException!");
			return;
		} catch (IOException e) {
			System.out.println( "FileNotFoundException!");
			return;
		}
    }
    

    
}
